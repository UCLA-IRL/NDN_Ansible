---
# tasks file for nlsr-from-source
- name: create nlsr user
  user: name=nlsr state=present shell=/bin/bash createhome=yes home=/home/nlsr

- name: create nlsr directories
  file: path=/etc/ndn/nlsr/keys state=directory owner=nlsr group=nlsr mode=0755
- file: path=/var/lib/ndn/nlsr state=directory owner=nlsr group=nlsr mode=0755
- file: path=/var/log/ndn/nlsr state=directory owner=nlsr group=nlsr mode=0755

- name: create nlsr.conf
  #template: src=nlsr.conf.j2 dest=/etc/ndn/nlsr/ansible_nlsr.conf owner=nlsr group=nlsr mode="u=rw,g=r,o=r"
  template: src=nlsr.conf.j2 dest=/etc/ndn/nlsr/nlsr.conf owner=nlsr group=nlsr mode="u=rw,g=r,o=r"
  notify: restart nlsr

#- debug:
#    msg: "default_prefix: {{ default_prefix }}"

# copy NLSR root cert
- copy: src=roles/nlsr/files/root.cert dest=/etc/ndn/nlsr/keys/root.cert

# generate site and nlsr keys for user nlsr if needed
- script: roles/nlsr/files/key_gen1.sh "{{ default_prefix }}" "{{ inventory_hostname }}"
  #register: keygen1
  ignore_errors: yes

# fetch unsigned keys back to here
- fetch: 
    src: /home/nlsr/unsigned_site.cert
    dest: roles/nlsr/files/ANSIBLE_{{ inventory_hostname }}_unsigned_site.cert
    flat: yes

- fetch: 
    src: /home/nlsr/approval.info
    dest: roles/nlsr/files/ANSIBLE_{{ inventory_hostname }}_approval.info
    flat: yes

# copy unsigned keys to UCLA for approval
- copy: src={{ item }} dest=/home/nlsr/ owner=nlsr group=nlsr mode=644
  with_fileglob:
    - roles/nlsr/files/*_unsigned_site.cert
  when: inventory_hostname == "UCLA"

# copy approval info (NAME and PREFIX) to UCLA for use in approval process
- copy: src={{ item }} dest=/home/nlsr/ owner=nlsr group=nlsr mode=644
  with_fileglob:
    - roles/nlsr/files/*_approval.info
  when: inventory_hostname == "UCLA"

# approve any unsigned keys
- script: roles/nlsr/files/key_approval.sh 
  #register: root_approved
  when: inventory_hostname == "UCLA"
  ignore_errors: yes

# get the names of approved site certs
- name: get filenames of approved site certs
  shell: cd /home/nlsr/ ; ls -1 ANSIBLE_*_site.cert | grep -v unsigned
  register: approved_sites
  when: inventory_hostname == "UCLA"

- debug:
    msg: "approved_sites.stdout_lines: {{ approved_sites.stdout_lines }}"
  when: inventory_hostname == "UCLA"

# fetch approved site certs
- fetch: src=/home/nlsr/{{ item }} dest=roles/nlsr/files/  flat=yes
  when: inventory_hostname == "UCLA"
  with_items: "{{ (inventory_hostname == 'UCLA') | ternary(approved_sites.stdout_lines, '') }}"

- name: check if <NAME>_site.cert exists
  local_action: stat path=roles/nlsr/files/ANSIBLE_{{inventory_hostname}}_site.cert
  #become_user: jdd
  become: false
  register: stat_result

# copy approved site certs to sites
- copy: src=roles/nlsr/files/ANSIBLE_{{inventory_hostname}}_site.cert dest=/etc/ndn/nlsr/keys/site.cert
  when: stat_result|success
  ignore_errors: yes

# clean up the approval info files, getting rid of any for which we have approved site certs
- local_action: command roles/nlsr/files/clean_approval_info.sh \"{{ role_path }}\"
  #become_user: jdd
  become: false

- debug:
    msg: "about to do key_gen2.sh {{default_prefix}} ndnops {{inventory_hostname}} {{router_name}}"

# finish generating keys and certs for user nlsr
- script: roles/nlsr/files/key_gen2.sh "{{default_prefix}}" "ndnops"  "{{inventory_hostname}}" "{{router_name}}"
  #register: keygen2
  ignore_errors: yes


- name: create log4cxx.conf
  copy: dest=/etc/ndn/nlsr/log4cxx.conf src=roles/nlsr/files/log4cxx.conf owner=root group=root mode=0644
  notify: restart nlsr

- name: purge nlsr
  apt: name=nlsr state=absent purge=yes update_cache=yes
  when: ansible_distribution == "Ubuntu" 

- name: install general ubuntu packages for dev building
  when: ansible_distribution == "Ubuntu" 
  action: >
       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
  with_items:
       - protobuf-compiler
       - liblog4cxx10-dev
       - libprotobuf-dev

#- name: install nlsr
#  apt: name=nlsr state=latest update_cache=yes

#- name: install NFD from source
#  apt: name=nlsr state=latest update_cache=yes
- name: git nlsr
  git: repo=http://github.com/named-data/NLSR
       dest=/tmp/NLSR
       update=yes
       version={{nlsr_version}}
  register: gitclone

- debug: 
    msg: "debug: gitclone.changed: {{ gitclone.changed }}"

#- name: configure NLSR
- command: ./waf --boost-libs="{{ boost_base_location }}"/lib --boost-includes="{{ boost_base_location }}"/include configure
  args:
    chdir: /tmp/NLSR
  when: gitclone.changed

#- name: build NLSR
- command: ./waf clean
  args:
    chdir: /tmp/NLSR
  when: gitclone.changed

#- name: clean NLSR
- command: ./waf 
  args:
    chdir: /tmp/NLSR
  when: gitclone.changed

#- name: install NLSR
- command: ./waf  install
  args:
    chdir: /tmp/NLSR
  when: gitclone.changed

- name: copy /etc/init/nlsr.conf
  copy: dest=/etc/init/nlsr.conf src=roles/nlsr-from-source/files/etc-init-nlsr.conf owner=root group=root mode=0644
  when: ansible_distribution == "Ubuntu" 

- name: copy /lib/systemd/system/nlsr.service
  copy: dest=/lib/systemd/system/nlsr.service src=roles/nlsr-from-source/files/nlsr.service owner=root group=root mode=0644
  when: ansible_distribution == "RedHat" 

- file: path=/etc/systemd/system/multi-user.target.wants/nlsr.service  state=link  src=/lib/systemd/system/nlsr.service
  when: ansible_distribution == "RedHat" 

- command: systemctl daemon-reload
  when: ansible_distribution == "RedHat" 

- name: start nlsr
  service: name=nlsr state=started enabled=yes

