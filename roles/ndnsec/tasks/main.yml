---
# tasks file for ndnsec

- name: add ndnsec user
  user: name=ndnsec state=present shell=/bin/bash password=LrVkOUM1s16xE

- name: install ndnsec libraries 
  action: >
       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
  with_items:
       - ndnsec


- cron: name="auto-approve guest certs" state=present user="ndnsec" minute="*/5" job="/usr/local/bin/ndnop-process-requests --guest-only --auto-approve"
  when: supports_guest_certs and inventory_hostname != "UCLA"

- cron: name="auto-approve guest certs" state=absent user="ndnsec" minute="*/5" job="/usr/local/bin/ndnop-process-requests --guest-only --auto-approve"
  when: not supports_guest_certs

- script: roles/ndnsec/files/checkKey.sh "{{ default_prefix }}"
  register: key_present
  ignore_errors: yes

- debug:
    msg: "Found key exists for default_prefix: {{ default_prefix }}"
  when: key_present is defined and (key_present.rc == 0)

- debug:
    msg: "Found key does NOT exist for default_prefix: {{ default_prefix }}"
  when: key_present is defined and (key_present.rc != 0)

- script: roles/ndnsec/files/generateKey.sh "{{ default_prefix }}"
  when: key_present is not defined or key_present.rc != 0
  ignore_errors: yes

# fetch unsigned key back to here
- fetch:
    src: /home/ndnsec/generated_key.txt
    dest: roles/ndnsec/files/ANSIBLE_{{ inventory_hostname }}_unsigned_site.cert
    flat: yes
  when: (key_present is not defined or key_present.rc != 0) and (inventory_hostname != "REMAP")
  ignore_errors: yes

# REMAP: fetch unsigned key back to here
- fetch:
    src: /home/ndnsec/generated_key.txt
    dest: roles/ndnsec/files/REMAP_{{ inventory_hostname }}_unsigned_site.cert
    flat: yes
  when: (key_present is not defined or key_present.rc != 0) and (inventory_hostname == "REMAP")

- name: create site-cert directory
  file: path=/home/testbed-root/site-certs state=directory owner=testbed-root group=testbed-root mode=0755
  when: inventory_hostname == "UCLA"

# copy unsigned keys to UCLA for approval
- copy: src={{ item }} dest=/home/testbed-root/site-certs owner=testbed-root group=testbed-root mode=644
  with_fileglob:
    - roles/ndnsec/files/ANSIBLE*_unsigned_site.cert
  when: inventory_hostname == "UCLA"

- name: create site-cert directory for REMAP approval by ndnsec
  file: path=/home/ndnsec/site-certs state=directory owner=ndnsec group=ndnsec mode=0755
  when: inventory_hostname == "UCLA"

# copy unsigned keys to UCLA for approval
- copy: src={{ item }} dest=/home/ndnsec/site-certs owner=ndnsec group=ndnsec mode=644
  with_fileglob:
    - roles/ndnsec/files/REMAP*_unsigned_site.cert
  when: inventory_hostname == "UCLA"

# approve any unsigned keys
- script: roles/ndnsec/files/key_approval.sh
  when: inventory_hostname == "UCLA"
  ignore_errors: yes

# approve any REMAP unsigned keys
- script: roles/ndnsec/files/remap_key_approval.sh
  when: inventory_hostname == "UCLA"
  ignore_errors: yes

# get the names of approved site certs
- name: get filenames of approved site certs
  shell: cd /home/testbed-root/site-certs/ ; ls -1 *.signed 
  register: approved_sites
  when: inventory_hostname == "UCLA"
  ignore_errors: yes

# get the names of approved REMAP site certs
- name: get filenames of approved site certs
  shell: cd /home/ndnsec/site-certs/ ; ls -1 *.signed 
  register: remap_approved_sites
  when: inventory_hostname == "UCLA"
  ignore_errors: yes


# fetch approved site certs
- fetch: src=/home/testbed-root/site-certs/{{ item }} dest=roles/ndnsec/files/  flat=yes
  when: inventory_hostname == "UCLA"
  with_items: "{{ (inventory_hostname == 'UCLA') | ternary(approved_sites.stdout_lines, '') }}"

# fetch approved REMAP site certs
- fetch: src=/home/ndnsec/site-certs/{{ item }} dest=roles/ndnsec/files/  flat=yes
  when: inventory_hostname == "UCLA"
  with_items: "{{ (inventory_hostname == 'UCLA') | ternary(remap_approved_sites.stdout_lines, '') }}"

- name: check if <NAME>_site.cert exists
  local_action: stat path=roles/ndnsec/files/ANSIBLE_{{ inventory_hostname }}_unsigned_site.cert.signed
  become: false
  register: stat_result

# copy approved site certs to sites
- copy: src=roles/ndnsec/files/ANSIBLE_{{inventory_hostname}}_unsigned_site.cert.signed dest=/etc/ndn/keys/default.ndncert  mode=644
  when: stat_result|success
  ignore_errors: yes

# install certs on gateways
- script: roles/ndnsec/files/installCert.sh 
  when: stat_result|success
  ignore_errors: yes

- name: check if REMAP <NAME>_site.cert exists
  local_action: stat path=roles/ndnsec/files/REMAP_{{ inventory_hostname }}_unsigned_site.cert.signed
  become: false
  when: (inventory_hostname == "REMAP")
  register: remap_stat_result

# copy approved site certs to sites
- copy: src=roles/ndnsec/files/REMAP_{{inventory_hostname}}_unsigned_site.cert.signed dest=/etc/ndn/keys/default.ndncert  mode=644
  when: (remap_stat_result|success) and (inventory_hostname == "REMAP")
  ignore_errors: yes

# install certs on gateways
- script: roles/ndnsec/files/installCert.sh 
  when: (remap_stat_result|success) and (inventory_hostname == "REMAP")
  ignore_errors: yes

# Check that there is a default name and that default_prefix == default name on node
# if not, try to change default name to default_prefix
- script: roles/ndnsec/files/checkName.sh "{{ default_prefix }}"
  register: name_present
  ignore_errors: yes

- debug:
    msg: "Found default name agrees with default_prefix: {{ default_prefix }}"
  when: name_present.rc == 0

- debug:
    msg: "Found default name does NOT agree with default_prefix: {{ default_prefix }}"
  when: name_present.rc != 0

- script: roles/ndnsec/files/setDefaultName.sh "{{ default_prefix }}"
  when: name_present.rc != 0
  register: name_present2
  ignore_errors: yes

- debug:
    msg: "Tried setting default name. Default name still does NOT agree with default_prefix: {{ default_prefix }}"
  when: name_present2 is defined and (name_present2.rc != 0)

- script: roles/ndnsec/files/checkCert.sh "{{ default_prefix }}"
  register: cert_present
  when: ((key_present is defined and key_present.rc == 0) or (key_present2 is defined and key_present2.rc == 0))
  ignore_errors: yes

- debug:
    msg: "Found cert exists for default_prefix: {{ default_prefix }}"
  when: cert_present is defined and (cert_present.rc == 0)

- debug:
    msg: "Found cert does NOT exist for default_prefix: {{ default_prefix }}"
  when: cert_present is defined and (cert_present.rc != 0)

- script: roles/ndnsec/files/checkForValidCert.sh "{{ default_prefix }}"
  register: cert_valid
  when: cert_present is defined and (cert_present.rc == 0)
  ignore_errors: yes

- debug:
    msg: "Found valid cert exists for default_prefix: {{ default_prefix }}"
  when: cert_valid is defined and (cert_valid.rc == 0)

- debug:
    msg: "Found valid cert does NOT exist for default_prefix: {{ default_prefix }}"
  when: cert_valid is defined and (cert_valid.rc != 0)

- script: roles/ndnsec/files/installCert.sh "{{ cert_url }}"  "{{ default_prefix }}"
  when: (cert_present.rc != 0 or (cert_valid is defined and (cert_valid.rc != 0 ))) and (cert_url is defined)

