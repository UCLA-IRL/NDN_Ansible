---
# need to add NDN repository

# When RHEL we need these:
#    - wget         
#    - python-devel  (sudo yum install python-devel) This is needed by boost
################    - boost-devel   (sudo yum install boost-devel)
#    - build boost libs from source: 
#          > wget https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.gz
#          > tar -xzf boost_1_64_0.tar.gz
#          > cd boost_1_64_0
#          > ./bootstrap.h
#          > ./b2
#          > sudo ./b2 install
#          >
#    
#    - sqlite3       (sudo yum install sqlite)
#    - sqlite3-dev   (sudo yum install sqlite-devel)
#    - crypto++      (git http://github.com/weidai11/cryptopp/releases/tag/CRYPTOPP_5_6_5)
#                      make static dynamic cryptest.exe ; sudo make install
#    - openssl       (sudo yum install openssl)
#    - openssl-devel (sudo yum install openssl openssl-devel)

# tasks file for NOC
# apt: name={{ item }} state=present

- debug:
    msg: "OS: {{ ansible_distribution }} major version: {{ ansible_distribution_major_version }} full version: {{ ansible_distribution_version }}"

- name: create NOC bin directory
  file: path=/home/{{ansible_user}}/ndn-ops/NOC/bin state=directory owner={{ansible_user}} group={{ansible_user}} mode=0755

- name: copy checkAndRestart_nlsr.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/checkAndRestart_nlsr.sh  src=roles/NOC/files/checkAndRestart_nlsr.sh.16.04 owner={{ansible_user}} group={{ansible_user}} mode=0755
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version  == "16")

- name: copy checkAndRestart_nlsr.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/checkAndRestart_nlsr.sh  src=roles/NOC/files/checkAndRestart_nlsr.sh.14.04 owner={{ansible_user}} group={{ansible_user}} mode=0755
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version  == "14")

- cron: name="check and restart nlsr" state="absent" user="{{ansible_user}}" minute="*/30" job="/home/{{ansible_user}}/ndn-ops/NOC/bin/checkAndRestart_nlsr.sh  "

- name: copy checkVersions.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/checkVersions.sh  src=roles/NOC/files/checkVersions.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

- name: copy weeklyNdnMaintenance.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/weeklyNdnMaintenance.sh  src=roles/NOC/files/weeklyNdnMaintenance.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

- cron: name="weekly maintenance" state="present" user="root" minute=5 weekday=0 hour=2 job="/home/{{ansible_user}}/ndn-ops/NOC/bin/weeklyNdnMaintenance.sh  "

- name: copy monthlyNdnMaintenance.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/monthlyNdnMaintenance.sh  src=roles/NOC/files/monthlyNdnMaintenance.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

- cron: name="monthly maintenance" state="present" user="root" minute=5 day=5 hour=3 job="/home/{{ansible_user}}/ndn-ops/NOC/bin/monthlyNdnMaintenance.sh  "

#- cron: name="check NDN versions" state="present" user="root" minute="3,13,23,33,43,53" job="/home/{{ansible_user}}/ndn-ops/NOC/bin/checkVersions.sh  "

- cron: name="check NDN versions" state="present" user="root" minute="3,13,23,33,43,53" job="/home/{{ansible_user}}/ndn-ops/NOC/bin/checkVersions.sh  "

- name: copy rotateLogs.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/rotateLogs.sh  src=roles/NOC/files/rotateLogs.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

- name: copy purge_kernelImages.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/purge_kernelImages.sh  src=roles/NOC/files/purge_kernelImages.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

- name: copy check_fail2ban_log.sh to NOC/bin
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/check_fail2ban_log.sh  src=roles/NOC/files/check_fail2ban_log.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

# Create files for use in Testbed tests
# Actually we want to create this in a separate playbook so we do it all locally and
# not have to worry about whether some nodes are currently up or down.
# Doing it here we would only catch the machines that are current up and the down or
# inaccessible machines would not show up in the files.
# we will create these files in testbed_node_link_db.yml
# and here we will access them from roles/node_link_db_gen/files

- name: create db files dir
  local_action: file path=roles/NOC/files/testfiles state=directory
  run_once: true
  become: false

#- local_action: template src=node_address.j2 dest=roles/NOC/files/testfiles/node_address.{{inventory_hostname}}.txt
#  become: false
#
#- local_action: template src=node_prefix.j2 dest=roles/NOC/files/testfiles/node_prefix.{{inventory_hostname}}.txt
#  become: false
#
#- local_action: template src=node_neighbors.j2 dest=roles/NOC/files/testfiles/node_neighbors.{{inventory_hostname}}.txt
#  become: false
#
## Combined all node address files
#- name: Combined all node address files
#  local_action: shell cat roles/NOC/files/testfiles/node_address.*.txt > roles/NOC/files/node_list.txt
#  run_once: true
#  become: false
#
## Combined all node neighbor files
#- name: Combined all node neighbor files
#  local_action: shell cat roles/NOC/files/testfiles/node_neighbors.*.txt > roles/NOC/files/node_neighbors.txt
#  run_once: true
#  become: false
#
## Combined all node prefix files
#- name: Combined all node prefix files
#  local_action: shell cat roles/NOC/files/testfiles/node_prefix.*.txt > roles/NOC/files/node_prefix.txt
#  run_once: true
#  become: false

- name: create NOC directories
  file: path=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests state=directory owner={{ansible_user}} group={{ansible_user}} mode=0755

- name: list copy testfiles for ping tests
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests/node_list.txt  src=roles/node_link_db_gen/files/node_list.txt owner={{ansible_user}} group={{ansible_user}} mode=0644

- name: neighbors copy testfiles for ping tests
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests/node_neighbors.txt  src=roles/node_link_db_gen/files/node_neighbors.txt owner={{ansible_user}} group={{ansible_user}} mode=0644

- name: prefix copy testfiles for ping tests
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests/node_prefix.txt  src=roles/node_link_db_gen/files/node_prefix.txt owner={{ansible_user}} group={{ansible_user}} mode=0644



- name: copy ndnping parallel test script
  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests/./getTestbedDelays_ndnping_parallel.sh  src=roles/NOC/files/./getTestbedDelays_ndnping_parallel.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

#- name: copy ndnping parallel test prefix list
#  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests/./full_prefix_list.txt  src=roles/NOC/files/./full_prefix_list.txt owner={{ansible_user}} group={{ansible_user}} mode=0644

#- name: copy ndnping parallel test prefix list (UP)
#  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests/./full_prefix_list_UP.txt  src=roles/NOC/files/./full_prefix_list_UP.txt owner={{ansible_user}} group={{ansible_user}} mode=0644

##- cron: name="parallel ndn ping test" user="{{ansible_user}}" state=present disabled=yes minute="15" job="cd /home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests; ./getTestbedDelays_ndnping_parallel.sh -c 300 -n {{ inventory_hostname }} "

#- cron: name="parallel ndn ping test" user="{{ansible_user}}" state=present disabled=yes minute="15" job="cd /home/{{ansible_user}}/ndn-ops/NOC/ping_delay_tests; ./getTestbedDelays_ndnping_parallel.sh -c 300 -n {{ inventory_hostname }} "

# Download and install EPEL for Centos/RHEL version 7
- name: Download EPEL Repo - Centos/RHEL 7
  get_url: url=http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm dest=/tmp/epel-release-latest-7.noarch.rpm
  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

- name: Install EPEL Repo - Centos/RHEL 7
  command: rpm -ivh /tmp/epel-release-latest-7.noarch.rpm creates=/etc/yum.repos.d/epel.repo
  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

- name: install general RedHat packages 
  when: ansible_distribution == "RedHat" 
  action: >
       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
  with_items:
       - net-tools
       - tcpdump
       - rpm-build
       - apr-devel
       - wget
       - python-devel
       - bzip2-devel
       - fail2ban
       - sqlite-devel
       - openssl
       - openssl-devel
       - protobuf
       - protobuf-compiler
       - protobuf-devel
       - log4cxx.x86_64

#- name: remove ndn dev repository
#  apt_repository: repo='ppa:named-data/ppa-dev' state=absent
#  when: ansible_distribution == "Ubuntu" 

#- name: add ndn dev repository
#  apt_repository: repo='ppa:named-data/ppa-dev' state=present
#  when: ansible_distribution == "Ubuntu" 

#- name: remove ndn repository (we will then re-add it to make sure we get new OS version covered)
#  apt_repository: repo='ppa:named-data/ppa' state=absent
#  when: ansible_distribution == "Ubuntu" 
#
#- name: add ndn repository
#  apt_repository: repo='ppa:named-data/ppa' state=present
#  when: ansible_distribution == "Ubuntu" 

- command: apt-get -y update
  become: yes

- command: apt-get -y upgrade
  become: yes

#- name: install general ubuntu packages 
#  when: ansible_distribution == "Ubuntu" 
#  action: >
#       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes autoclean=yes autoremove=yes
#  with_items:
#       - build-essential
#       - git
#       - openssl 
#       - python-openssl 
#       - libffi-dev
#       - python-cffi
#       - libssl-dev 
#       - expat 
#       - libexpat-dev 
#       - libpcap-dev
#       - gawk 
#       - texinfo 
#       - asciidoc 
#       - finger
#       - python-software-properties
#       - software-properties-common
#       - ntp
#       - autoconf 
#       - libtool
#       - python-dev
#       - g++ 
#       - autotools-dev 
#       - libicu-dev 
#       - libbz2-dev  
#       - sqlite3
#       - pkg-config
#       - libssl-dev 
#       - libsqlite3-dev 
#       - libcrypto++-dev
#       - aptitude
#       - python3-dev
#       - python3-setuptools
#       - python3-pip
#       - python-pip
#       - fail2ban
#       - liblog4cxx10-dev

- name: install general ubuntu packages 
  apt:
    name: ['build-essential', 'git', 'openssl', 'python-openssl', 'libffi-dev', 'python-cffi', 'libssl-dev', 'expat', 'libexpat-dev', 'libpcap-dev', 'gawk', 'texinfo', 'asciidoc',
       'finger', 'python-software-properties', 'software-properties-common', 'ntp', 'autoconf', 'libtool', 'python-dev', 'g++', 'autotools-dev', 'libicu-dev', 'libbz2-dev', 'sqlite3', 'pkg-config', 'libssl-dev', 'libsqlite3-dev', 'libcrypto++-dev', 'aptitude', 'python3-dev', 'python3-setuptools', 'python3-pip', 'python-pip', 'fail2ban', 'liblog4cxx10-dev' ]
    update_cache: yes
    autoclean: yes
    autoremove: yes
  when: ansible_distribution == "Ubuntu" 

#       - liblog4cxx10*

#       - liblog4cxx10
#         when {{ ansible_distribution_major_version }} == 14 
#       - liblog4cxx10v5
#         when {{ ansible_distribution_major_version }} == 16 

- command: add-apt-repository -y -r ppa:named-data/ppa
  become: yes

- command: add-apt-repository -y  ppa:named-data/ppa
  become: yes

#- name: remove Ashlesh experimental ndn repository
#  #apt_repository: repo='ppa:agawande/named-data-exp' state=present
#  apt_repository: repo='ppa:agawande/named-data-exp' state=absent
#  when: ansible_distribution == "Ubuntu" 

- name: install basic ndn packages (ndn-cxx, nfd, ndnsec)
  apt:
    name: ['ndn-cxx', 'ndn-cxx-dev', 'nfd', 'ndnsec']
    update_cache: yes
    autoclean: yes
    autoremove: yes
  when: ansible_distribution == "Ubuntu" 

#- name: remove python3 stuff
#  apt: 
#    name: python3-dev python3-setuptools 
#    state: absent 
#    purge: yes

#- command: aptitude -y install python3-dev python3-setuptools
#  become: yes
#  become_user: root

#- command: /usr/bin/easy_install3 pip
#  become: yes
#  become_user: root

# looks like sometimes need to upgrade pyOpenSSL first before upgrading pip
- command: python -m easy_install --upgrade pyOpenSSL
  become: yes

- command: python3 -m pip install --upgrade pip
  become: yes

- command: python -m pip install --upgrade pip
  become: yes

- pip: name=setuptools state=latest executable=pip3

- pip: name=requests state=latest executable=pip3

#- pip: name=requests,pyndn executable=/usr/local/bin/pip3

#- pip: name=pyndn state=latest executable=/usr/local/bin/pip

- pip: name=pyndn state=latest  executable=pip3 extra_args=--pre

- name: copy ndnop-process-requests to TESTBED
  copy: dest=/usr/local/bin/ndnop-process-requests src=roles/NOC/files/ndnop-process-requests.testbed owner=root group=root mode=0755
  when: inventory_hostname != "UCLA"

#- name: copy nfdcLog.sh
#  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/nfdcLog.sh  src=roles/NOC/files/nfdcLog.sh owner={{ansible_user}} group={{ansible_user}} mode=0755

#- cron: name="nfdc face list " user="root" state=present disabled=yes minute="*/1" job="/home/{{ansible_user}}/ndn-ops/NOC/bin/nfdcLog.sh"
#  when: ansible_distribution_major_version == 14 

#- name: copy ndnop-process-requests to UCLA
#  copy: dest=/usr/local/bin/ndnop-process-requests src=roles/NOC/files/ndnop-process-requests.ucla owner=root group=root mode=0755
#  when: inventory_hostname == "UCLA"

#- name: create ndndumpScript.sh
#  template: src=ndndumpScript.sh.j2 dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/ndndumpScript.sh  owner=root group=root mode="u=rwx,g=rx,o=rx"
#
#- name: copy checkAndRestart_ndndumpScript.sh to NOC/bin
#  copy: dest=/home/{{ansible_user}}/ndn-ops/NOC/bin/checkAndRestart_ndndumpScript.sh  src=roles/NOC/files/checkAndRestart_ndndumpScript.sh owner={{ansible_user}} group={{ansible_user}} mode=0755
#
#- cron: name="ndndump script check" user="{{ansible_user}}" state=absent disabled=no minute="*/5" job="cd /home/{{ansible_user}}/ndn-ops/NOC/bin; sudo ./checkAndRestart_ndndumpScript.sh  "
#
#- script: roles/NOC/files/kill_ndndumpScript.sh 
#
